<p>
    Base Line Calculator for accumulating Modifiers for Tests.
</p>

<form id="form">

    <p>
        Select a Test from the following incomplete List to reveal all modifiers that are applicable.
    </p>

    <label>Type of Test:
        {{> components/select name="type" options=this.tests}}
        {{> components/checkbox name="opposedTest" title="Is Opposed Test"}}
    </label>
    <div>
        {{> calc_situation options=this}}
    </div>
    <div style="display: grid; grid-auto-columns: 1fr; grid-auto-flow: column; grid-gap: 20px;">
        <div>
            <h1 if="opposedTest">
                Attacker
            </h1>
            <div>
                Wound Modifiers
                <div style="display: grid; grid-auto-columns: 1fr; grid-auto-flow: column;">
                    {{> components/number title='Physical Damage:' name='aphysical' default='0'}}

                    {{> components/number title='Stun Damage:' name='astun' default='0'}}
                    <div if="type==='vehicle'">
                        {{> components/number title='Vehicle Damage:' name='vdamage' default='0'}}
                    </div>
                </div>
                <p>Total Modifier due to wounds: <span calculated-value="awounds"></span></p>
            </div>

            <div if="type==='healing'">
                Healing Modifiers
            </div>
            <div if="type==='melee'">
                {{> calc_melee}}
            </div>
            <div if="type==='ranged'">
                {{> calc_ranged}}

            </div>
            <div if="type==='matrix'">
                Matrix Modifiers
            </div>
            <div if="type==='vehicle'">
                {{> calc_vehicle}}
            </div>
        </div>
        <div if="opposedTest">
            {{> calc_opposed}}
        </div>
    </div>


    <script>
        window.form = document.getElementById('form');


        form.addEventListener('change', () => {
            updateForm();
        })
        updateForm = function () {
          
            form.querySelectorAll('[if]').forEach(element => {
                ifFormula = element.getAttribute('if');

                element.hidden = !eval(ifFormula);
            });

            form.querySelectorAll('[calculated-value]').forEach(element => {
                const functionRef = element.getAttribute('calculated-value');
                if (typeof window[functionRef] === 'function') {
                    const value = window[functionRef](element);
                    element.textContent = value;
                    element.value = value;
                } else if (typeof window[functionRef] === 'string') {
                    element.textContent = window[functionRef];
                    element.value = window[functionRef];
                } 

            })

            form.querySelectorAll('[checked-when]').forEach(element => {
                const expression = element.getAttribute('checked-when');
                element.checked = eval(expression);

            })

        }

        environmental = function (element) {
            const modifiers = [
                parseInt(visibility),
                parseInt(range),
                parseInt(wind),
                parseInt(light)
            ];
            let standingModifier = Math.min(...modifiers);
            const twoOrMoreThreshold = modifiers.filter(predicate => predicate === -6).length > 1;
            if (twoOrMoreThreshold) {
                standingModifier = -10;
            }
            return standingModifier;
        }

        meleeEnvironmental = function (element) {
            const modifiers = [
                parseInt(visibility),
                parseInt(light)
            ];
            let standingModifier = Math.min(...modifiers);
            const twoOrMoreThreshold = modifiers.filter(predicate => predicate === -6).length > 1;
            if (twoOrMoreThreshold) {
                standingModifier = -10;
            }
            return standingModifier;
        }

        awounds = function (element) {
            const physicalModifier = parseInt(aphysical);
            const stunModifier = parseInt(astun);

            const totalModifier = Math.floor(Math.round(physicalModifier / 3)) + Math.floor(Math.round(stunModifier / 3));

            return totalModifier * -1;
        }

        dwounds = function (element) {
            const physicalModifier = parseInt(dphysical);
            const stunModifier = parseInt(dstun);

            const totalModifier = Math.floor(Math.round(physicalModifier / 3)) + Math.floor(Math.round(stunModifier / 3));

            return totalModifier * -1;
        }

        vwounds = function (element) {
            const physicalModifier = parseInt(vdamage);
           
            const totalModifier = Math.floor(Math.round(physicalModifier / 3));

            return totalModifier * -1;
        }

        dSituationalDPModifier = function (element) {
            let value = 0;
            if (dmoving)
                value += 3;
            if (dprone)
                value += -2;
            if (dunaware)
                return NaN;
            if (dwoundedModifier)
                value += dwounds();
            if (areach)
                value += -parseInt(areachnethits);
            if (dreach)
                value += parseInt(dreachnethits);
            if (dcharge)
                value += +1;
            if (ddefended != '0')
                value += -parseInt(ddefended);
            if (anarrow)
                value += -1;
            if (amedium)
                value += -3;
            if (awide)
                value += -5;
            if (afa)
                value += -9;
            if (alb)
                value += -5;
            if (asa)
                value += -2;
            if (dinmelee)
                value += -3;
            if (drunning)
                value += 2;
            if (dgoodcover)
                value += 4;
            if (dpartialcover)
                value += 2;
            if (daoe)
                value += -2;
            return value;
        }



        defenseRangedDicepool = function (element) {
            return dwounds() + dSituationalDPModifier();
        }

        firemodeRounds = function (element) {
            switch (firemode) {
                case 'SS':
                case 'SA':
                    return 1;
                case 'SB':
                case 'BF':
                    return 3;
                case 'LB':
                    return 6;
                case 'FB':
                case 'FA':
                    return 10;
                case 'SF':
                    return 20;
            }
        }

        totalRecoil = function (element) {

            const bodyOrStrengthModifier = parseInt(brc) || 0;
            const weaponModifier = parseInt(rc) || 0;
            const progressiveModifier = parseInt(prc) || 0;
            const shotsFired = parseInt(firemodeRounds) || 0;

            const poolAgainstRecoil = 1 + Math.ceil(bodyOrStrengthModifier / 3) + weaponModifier;
            const roundsFired = progressiveModifier + shotsFired;
            if (firemode === 'SS' || firemode === 'SF') {

                return 0;
            }
            if (poolAgainstRecoil - roundsFired > 0)
                return 0;
            else
                return poolAgainstRecoil - roundsFired;
        }

        aSituationalDPModifier = function (element) {
            let value = 0;
            if (imaging)
                value += -3;
            if (moving)
                value += -2;
            if (inMelee)
                value += -3;
            if (running)
                value += -2;
            if (offHand)
                value += -2;
            if (woundedModifier)
                value += awounds();
             if (renvironmental)
                value += environmental();
            if (blindfire)
                value += -6;
            if (calledShot)
                value += -4;
            if (takeAim != '0')
                value += parseInt(takeAim);
            if (hasSmartgun)
                value += parseInt(smartgun);
            return value;
        }


        aSituationalLimitModifier = function (element) {
            let value = 0;
            if (takeAim != '0')
                value += parseInt(takeAim);
            return value;
        }


        ameleeSituationalDPModifier = function (element) {
            let value = 0;
            if (acharging)
                value += 2;
            if (aprone)
                value += -1;
            if (ameleeCalledshot)
                value += -4;
            if (asplitAttack)
                value += 0;
            if (ahighground)
                value += 2;
            if (meleewoundedModifier)
                value += awounds();
            if (aoffhand)
                value += -2;
            if (aflanking)
                value += parseInt(aflankingValue);
            if (disprone)
                value += 1;
            if (atouchonly)
                value += 2;
            return value;
        }

        meleeDicepool = function (element) {
            return meleeEnvironmental() + ameleeSituationalDPModifier();
        }

        rangedDicepool = function (element) {
            return aSituationalDPModifier() + totalRecoil();
        }

        rangedAccuracy = function (element) {
            return aSituationalLimitModifier();
        }

        rangedDefense = function (element) {
            switch (firemode) {
                case 'SS':
                case 'SA':
                    return 0;
                case 'SB':
                case 'BF':
                    return -2;
                case 'LB':
                    return -5;
                case 'FB':
                case 'FA':
                    return -9;
                case 'SF':
                    return 'Duck or Cover';
            }
        }

        vehicleTerrainModifier = function() {
            switch (form['terrain'].value) {
                case 'open':
                return 0;
                case 'light':
                return 1;
                case 'restricted':
                return 2;
                case 'tight':
                return 4;
            }
        }

        vehicleSituationalDPModifier = function() {
            let value = 0;
            if (pimpaired)
                value += parseInt(visibility);
            if (plighting)
                value += parseInt(light);
            if (phot)
                value += 1;
            if (pwounded)
                value += awounds();
            if (jumpedIn)
                value += parseInt(rcc);
            if (punaware)
                return NaN;
            return value;
        }

        vehicleDicepool = function() {
            return vehicleSituationalDPModifier();
        }

        vehicleLimit = function() {
            let value = 0;
            if (jumpedIn) 
                value += parseInt(rcc);
            if (vwounded)
                value += vwounds();
            if (par)
                value += 1;
            if (pvr)
                value += +2;
            return value;
        }

        vehicleThreshold = function() {
            let value = vehicleTerrainModifier();
            if (jumpedIn) 
                value += -parseInt(rcc);
            let isExtreme = false;

            switch(situation) {
                case 'easy':
                    value += 1;
                    break;
                case 'average':
                    value += 2;
                    break;
                case 'hard':
                    value += 3;
                    break;
                case 'extreme':
                    value += 4;
                    isExtreme = true;
                    break;
            }
            if (isExtreme) {
                return Math.max(1, value) + '+';
            } else {
                return Math.max(1, value);
            }
        }

        updateForm();
    </script>

</form>