<p>
    Base Line Calculator for accumulating Modifiers for Tests.
</p>

<form id="form">

    <p>
        Select a Test from the following incomplete List to reveal all modifiers that are applicable.
    </p>

    <label>Type of Test:
        {{> components/select name="type" options=this.tests}}
        {{> components/checkbox name="opposedTest" title="Is Opposed Test"}}
    </label>
    <div>
        {{> calc_situation}}
    </div>
    <div style="display: grid; grid-auto-columns: 1fr; grid-auto-flow: column; grid-gap: 20px;">
        <div>
            <h1 if="opposedTest">
                Attacker
            </h1>
            <div>
                Wound Modifiers
                <div style="display: grid; grid-auto-columns: 1fr; grid-auto-flow: column;">
                    {{> components/number title='Physical Damage:' name='aphysical' default='0'}}
                    {{> components/number title='Stun Damage:' name='astun' default='0'}}
                </div>
                <p>Total Modifier due to wounds: <span calculated-value="awounds"></span></p>
            </div>

            <div if="type==='healing'">
                Healing Modifiers
            </div>
            <div if="type==='melee'">
                {{> calc_melee}}
            </div>
            <div if="type==='ranged'">
                {{> calc_ranged}}

            </div>
            <div if="type==='matrix'">
                Matrix Modifiers
            </div>
        </div>
        <div if="opposedTest">
            {{> calc_opposed}}
        </div>
    </div>


    <script>
        const form = document.getElementById('form');
        let type;
        let firemode;
        let opposedTest = false;

        form.addEventListener('change', () => {
            updateForm();
        })
        updateForm = function () {
            type = form['type'].value;
            firemode = form['firemode'].value;
            opposedTest = form['opposedTest'].checked;

            form.querySelectorAll('[if]').forEach(element => {
                ifFormula = element.getAttribute('if');

                element.hidden = !eval(ifFormula);
            });

            form.querySelectorAll('[calculated-value]').forEach(element => {
                const functionRef = element.getAttribute('calculated-value');
                if (typeof window[functionRef] === 'function') {
                    const value = window[functionRef](element);
                    element.textContent = value;
                    element.value = value;
                }

            })

            form.querySelectorAll('[checked-when]').forEach(element => {
                const expression = element.getAttribute('checked-when');
                element.checked = eval(expression);

            })

        }

        environmental = function (element) {
            const modifiers = [
                parseInt(form['visibility'].value),
                parseInt(form['range'].value),
                parseInt(form['wind'].value),
                parseInt(form['light'].value)
            ];
            let standingModifier = Math.min(...modifiers);
            const twoOrMoreThreshold = modifiers.filter(predicate => predicate === -6).length > 1;
            if (twoOrMoreThreshold) {
                standingModifier = -10;
            }
            return standingModifier;
        }

        meleeEnvironmental = function (element) {
            const modifiers = [
                parseInt(form['visibility'].value),
                parseInt(form['light'].value)
            ];
            let standingModifier = Math.min(...modifiers);
            const twoOrMoreThreshold = modifiers.filter(predicate => predicate === -6).length > 1;
            if (twoOrMoreThreshold) {
                standingModifier = -10;
            }
            return standingModifier;
        }

        awounds = function (element) {
            const physicalModifier = parseInt(form['aphysical'].value);
            const stunModifier = parseInt(form['astun'].value);

            const totalModifier = Math.floor(Math.round(physicalModifier / 3)) + Math.floor(Math.round(stunModifier / 3));

            return totalModifier * -1;
        }

        dwounds = function (element) {
            const physicalModifier = parseInt(form['dphysical'].value);
            const stunModifier = parseInt(form['dstun'].value);

            const totalModifier = Math.floor(Math.round(physicalModifier / 3)) + Math.floor(Math.round(stunModifier / 3));

            return totalModifier * -1;
        }

        dSituationalDPModifier = function (element) {
            let value = 0;
            if (form['dmoving'].checked)
                value += 3;
            if (form['dprone'].checked)
                value += -2;
            if (form['dunaware'].checked)
                return NaN;
            if (form['dwoundedModifier'].checked)
                value += dwounds();
            if (form['areach'].checked)
                value += -parseInt(form['areachnethits'].value);
            if (form['dreach'].checked)
                value += parseInt(form['dreachnethits'].value);
            if (form['dcharge'].checked)
                value += +1;
            if (form['ddefended'].value != '0')
                value += -parseInt(form['ddefended'].value);
            if (form['anarrow'].checked)
                value += -1;
            if (form['amedium'].checked)
                value += -3;
            if (form['awide'].checked)
                value += -5;
            if (form['afa'].checked)
                value += -9;
            if (form['alb'].checked)
                value += -5;
            if (form['asa'].checked)
                value += -2;
            if (form['dinmelee'].checked)
                value += -3;
            if (form['drunning'].checked)
                value += 2;
            if (form['dgoodcover'].checked)
                value += 4;
            if (form['dpartialcover'].checked)
                value += 2;
            if (form['daoe'].checked)
                value += -2;
            return value;
        }



        defenseRangedDicepool = function (element) {
            return dwounds() + dSituationalDPModifier();
        }

        firemodeRounds = function (element) {
            switch (firemode) {
                case 'SS':
                case 'SA':
                    return 1;
                case 'SB':
                case 'BF':
                    return 3;
                case 'LB':
                    return 6;
                case 'FB':
                case 'FA':
                    return 10;
                case 'SF':
                    return 20;
            }
        }

        totalRecoil = function (element) {

            const bodyOrStrengthModifier = parseInt(form['brc'].value) || 0;
            const weaponModifier = parseInt(form['rc'].value) || 0;
            const progressiveModifier = parseInt(form['prc'].value) || 0;
            const shotsFired = parseInt(form['fmr'].value) || 0;

            const poolAgainstRecoil = 1 + Math.ceil(bodyOrStrengthModifier / 3) + weaponModifier;
            const roundsFired = progressiveModifier + shotsFired;
            if (firemode === 'SS' || firemode === 'SF') {

                return 0;
            }
            if (poolAgainstRecoil - roundsFired > 0)
                return 0;
            else
                return poolAgainstRecoil - roundsFired;
        }

        aSituationalDPModifier = function (element) {
            let value = 0;
            if (form['imaging'].checked)
                value += -3;
            if (form['moving'].checked)
                value += -2;
            if (form['inMelee'].checked)
                value += -3;
            if (form['running'].checked)
                value += -2;
            if (form['offHand'].checked)
                value += -2;
            if (form['woundedModifier'].checked)
                value += awounds();
            if (form['blindfire'].checked)
                value += -6;
            if (form['calledShot'].checked)
                value += -4;
            if (form['takeAim'].value != '0')
                value += parseInt(form['takeAim'].value);
            if (form['hasSmartgun'].checked)
                value += parseInt(form['smartgun'].value);
            return value;
        }


        aSituationalLimitModifier = function (element) {
            let value = 0;
            if (form['takeAim'].value != '0')
                value += parseInt(form['takeAim'].value);
            return value;
        }


        ameleeSituationalDPModifier = function (element) {
            let value = 0;
            if (form['acharging'].checked)
                value += 2;
            if (form['aprone'].checked)
                value += -1;
            if (form['ameleeCalledshot'].checked)
                value += -4;
            if (form['asplitAttack'].checked)
                value += 0;
            if (form['ahighground'].checked)
                value += 2;
            if (form['meleewoundedModifier'].checked)
                value += awounds();
            if (form['aoffhand'].checked)
                value += -2;
            if (form['aflanking'].checked)
                value += parseInt(form['aflankingValue'].value);
            if (form['disprone'].checked)
                value += 1;
            if (form['atouchonly'].checked)
                value += 2;
            return value;
        }

        meleeDicepool = function (element) {
            return meleeEnvironmental() + ameleeSituationalDPModifier();
        }

        rangedDicepool = function (element) {
            return environmental() + aSituationalDPModifier() + totalRecoil();
        }

        rangedAccuracy = function (element) {
            return aSituationalLimitModifier();
        }

        rangedDefense = function (element) {
            switch (firemode) {
                case 'SS':
                case 'SA':
                    return 0;
                case 'SB':
                case 'BF':
                    return -2;
                case 'LB':
                    return -5;
                case 'FB':
                case 'FA':
                    return -9;
                case 'SF':
                    return 'Duck or Cover';
            }
        }

        updateForm();
    </script>

</form>